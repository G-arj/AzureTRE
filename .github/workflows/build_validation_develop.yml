---
name: Build Validation

on:
  pull_request:
    branches: [main]

# for each ref (branch/pr) run just the most recent,
# cancel other pending/running ones
concurrency:
  group: "${{ github.workflow }}-${{ github.head_ref }}"
  cancel-in-progress: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Connected issue
        uses: actions/github-script@v6
        with:
          script: |
            const query = `query($prurl:URI!) {
              resource(url:$prurl) {
                ... on PullRequest {
                  closingIssuesReferences(first: 10) {
                    nodes {
                      number
                    }
                  }
                }
              }
            }`;

            const variables = {
              prurl:'https://github.com/microsoft/AzureTRE/pull/' + ${{ github.event.number }}
            }

            const result = await github.graphql(query, variables)

            if (result.resource.closingIssuesReferences.nodes.length == 0) {
              throw 'PR is not connected to any issues!'
            }

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          # Full git history is needed to get a proper list of
          # changed files within `super-linter`
          fetch-depth: 0
          persist-credentials: false

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            terraform:
              # we have more than *.tf files so better just check folders
              - '**/terraform/*'

      - name: Lint code base
        uses: github/super-linter@v4
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_MARKDOWN: true
          VALIDATE_PYTHON_FLAKE8: true
          VALIDATE_YAML: true
          VALIDATE_TERRAFORM: true
          RUN_LOCAL: true
          VALIDATE_JAVA: true
          JAVA_FILE_NAME: checkstyle.xml

      - name: Terraform format check
        if: steps.filter.outputs.terraform == 'true'
        run: terraform fmt -check -recursive

      # find all terraform folders and run validate to catch
      # configuration errors
      - name: Terraform validation
        if: steps.filter.outputs.terraform == 'true'
        run: |
          find . -type d -name 'terraform' -not -path '*cnab*' -print0 \
          | xargs -0 -I{} sh -c 'echo "***** Validating: {} *****"; \
          terraform -chdir={} init -backend=false; terraform -chdir={} validate'
